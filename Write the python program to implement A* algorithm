import heapq

def heuristic(a, b):
    # Simple heuristic: Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar_search(start, goal, graph):
    open_list = []
    heapq.heappush(open_list, (0, start))
    came_from = {}
    g_score = {start: 0}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph.get(current, []):
            tentative_g = g_score[current] + cost
            if tentative_g < g_score.get(neighbor, float("inf")):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score, neighbor))
    return None

if __name__ == "__main__":
    graph = {
        (0, 0): [((1, 0), 1), ((0, 1), 1)],
        (1, 0): [((0, 0), 1), ((1, 1), 1)],
        (0, 1): [((0, 0), 1), ((1, 1), 1)],
        (1, 1): [((1, 0), 1), ((0, 1), 1), ((2, 1), 1)],
        (2, 1): [((1, 1), 1), ((2, 2), 1)],
        (2, 2): [((2, 1), 1)]
    }
    start = (0, 0)
    goal = (2, 2)
    path = astar_search(start, goal, graph)
    print("Path found:", path)
