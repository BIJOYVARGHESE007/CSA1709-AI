from collections import deque

def is_valid(m_left, c_left, m_right, c_right):
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if (m_left > 0 and m_left < c_left):
        return False
    if (m_right > 0 and m_right < c_right):
        return False
    return True

def get_successors(state):
    m_left, c_left, m_right, c_right, boat = state
    successors = []
    moves = [(2,0),(0,2),(1,0),(0,1),(1,1)]
    if boat == 'L':
        for m, c in moves:
            new_state = (m_left - m, c_left - c, m_right + m, c_right + c, 'R')
            if is_valid(*new_state[:-1]):
                successors.append(new_state)
    else:
        for m, c in moves:
            new_state = (m_left + m, c_left + c, m_right - m, c_right - c, 'L')
            if is_valid(*new_state[:-1]):
                successors.append(new_state)
    return successors

def bfs(start, goal):
    queue = deque([(start, [start])])
    visited = set()
    while queue:
        state, path = queue.popleft()
        if state in visited:
            continue
        visited.add(state)
        if state == goal:
            return path
        for succ in get_successors(state):
            queue.append((succ, path + [succ]))
    return None

if __name__ == "__main__":
    start_state = (3, 3, 0, 0, 'L')
    goal_state = (0, 0, 3, 3, 'R')
    solution = bfs(start_state, goal_state)
    if solution:
        for step in solution:
            print(step)
    else:
        print("No solution exists.")
